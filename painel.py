import streamlit as st
import os
from github import Github
from github.GithubException import UnknownObjectException
from datetime import datetime
from PIL import Image
import io
import requests
import json
import time
import base64
import pandas as pd
import altair as alt

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="Painel T√°tico Final", page_icon="üìä", layout="wide")

# --- SISTEMA DE SENHA √öNICA ---
def check_password():
    if st.session_state.get("password_correct", False): return True
    def password_entered():
        if st.session_state.get("password") == st.secrets.get("APP_PASSWORD"):
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else: st.session_state["password_correct"] = False
    st.text_input("Password", type="password", on_change=password_entered, key="password")
    if "password_correct" in st.session_state and not st.session_state["password_correct"]:
        st.error("üòï Senha incorreta.")
    return False

# --- FUN√á√ïES DE CHAMADA √Ä IA (ESPECIALIZADAS) ---
def gerar_resposta_ia(prompt, imagens_bytes=None):
    api_key = st.secrets.get("GEMINI_API_KEY")
    if not api_key:
        st.error("Chave da API do Gemini n√£o encontrada.")
        return None
    
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={api_key}"
    headers = {'Content-Type': 'application/json'}
    
    parts = [{"text": prompt}]
    if imagens_bytes:
        for imagem_bytes in imagens_bytes:
            encoded_image = base64.b64encode(imagem_bytes).decode('utf-8')
            parts.append({"inline_data": {"mime_type": "image/jpeg", "data": encoded_image}})
            
    data = {"contents": [{"parts": parts}]}
    
    try:
        response = requests.post(url, headers=headers, data=json.dumps(data), timeout=300)
        response.raise_for_status()
        result = response.json()
        if 'candidates' in result and result['candidates']:
            return result['candidates'][0]['content']['parts'][0]['text']
    except Exception as e:
        st.error(f"Erro na chamada √† API: {e}")
    return None

# --- APLICA√á√ÉO PRINCIPAL ---
if check_password():
    st.sidebar.success("Autenticado com sucesso.")
    st.title("SISTEMA DE INTELIG√äNCIA T√ÅTICA")

    @st.cache_resource
    def get_github_connection():
        # ... (c√≥digo do GitHub sem altera√ß√µes)
        pass
    
    st.header("Central de Comando")
    tab1, tab2, tab3, tab4 = st.tabs(["Dossi√™ 1 (Liga)", "Dossi√™ 2 (Clube)", "Dossi√™ 3 (P√≥s-Jogo)", "Dossi√™ 4 (Pr√©-Jogo)"])

    with tab1:
        st.subheader("Criar Dossi√™ 1: An√°lise Geral da Liga")

        # FASE 1: GERA√á√ÉO DO PANORAMA DA LIGA
        if 'dossie_p1_resultado' not in st.session_state:
            with st.form("form_dossie_1_p1"):
                st.markdown("**Parte 1: Panorama da Liga (Pesquisa Aut√≥noma da IA)**")
                liga = st.text_input("Liga (nome completo)*", placeholder="Ex: Premier League")
                pais = st.text_input("Pa√≠s*", placeholder="Ex: Inglaterra")
                if st.form_submit_button("Gerar Panorama da Liga"):
                    if not all([liga, pais]):
                        st.error("Por favor, preencha todos os campos obrigat√≥rios (*).")
                    else:
                        with st.spinner("AGENTE DE INTELIG√äNCIA a pesquisar e a redigir o relat√≥rio..."):
                            prompt_p1 = f"""**TAREFA CR√çTICA:** Gere um relat√≥rio sobre a liga de futebol '{liga}' do pa√≠s '{pais}', seguindo o modelo de sa√≠da obrigat√≥rio. Fale apenas sobre futebol.
**MODELO DE SA√çDA OBRIGAT√ìRIO:**
---
### **DOSSI√ä ESTRAT√âGICO DE LIGA: {liga.upper()}**
#### **PARTE 1: VIS√ÉO GERAL E HIST√ìRICA**
* **Perfil da Liga:** [Resumo]
* **Domin√¢ncia na D√©cada:** [An√°lise]
* **Principais Rivalidades:** [Descri√ß√£o]
* **Lendas da Liga:** [Men√ß√£o]
* **Curiosidades e Recordes:** [Factos]
---"""
                            resultado_p1 = gerar_resposta_ia(prompt_p1)
                            if resultado_p1 and "dossi√™ estrat√©gico" in resultado_p1.lower() and "parte 1" in resultado_p1.lower():
                                st.session_state['dossie_p1_resultado'] = resultado_p1
                                st.session_state['contexto_liga'] = {'liga': liga, 'pais': pais}
                                st.rerun()
                            else:
                                st.error("A gera√ß√£o da Parte 1 falhou. Tente novamente.")
                                st.text_area("Resposta recebida:", resultado_p1 or "Nenhuma resposta.", height=150)

        # FASE 2: UPLOAD DAS IMAGENS E GERA√á√ÉO FINAL
        if 'dossie_p1_resultado' in st.session_state and 'dossie_final_completo' not in st.session_state:
            st.markdown("---"); st.success("Parte 1 gerada!"); st.markdown(st.session_state['dossie_p1_resultado']); st.markdown("---")
            st.subheader("Parte 2: An√°lise T√©cnica via Upload de Imagens")
            with st.form("form_dossie_1_p2"):
                prints_classificacao = st.file_uploader("Prints das Classifica√ß√µes*", accept_multiple_files=True, key="prints_gerais")
                if st.form_submit_button("Analisar Imagens e Gerar Dossi√™ Final"):
                    if not prints_classificacao:
                        st.error("Por favor, fa√ßa o upload de pelo menos uma imagem.")
                    else:
                        lista_imagens_bytes = [p.getvalue() for p in prints_classificacao]
                        
                        with st.spinner("Etapa 2.1: Lendo as imagens e extraindo dados..."):
                            prompt_extracao = """**TAREFA:** Analise cada imagem fornecida... [Resto do prompt de extra√ß√£o]..."""
                            json_data_str = gerar_resposta_ia(prompt_extracao, lista_imagens_bytes)

                        if json_data_str:
                            try:
                                with st.spinner("Etapa 2.2: Calculando domin√¢ncia e escrevendo a an√°lise..."):
                                    start_index = json_data_str.find('[')
                                    if start_index == -1: start_index = json_data_str.find('{')
                                    
                                    if start_index != -1:
                                        json_only_str = json_data_str[start_index:].strip().replace("```", "")
                                        dados_temporadas = json.loads(json_only_str)
                                    else:
                                        raise json.JSONDecodeError("Nenhum bloco JSON encontrado.", json_data_str, 0)
                                    
                                    placar = {}
                                    for temp in dados_temporadas:
                                        for item in temp.get("classificacao", []):
                                            equipa = item.get("equipa")
                                            pos = item.get("posicao")
                                            if not equipa or not isinstance(pos, int): continue
                                            placar.setdefault(equipa, 0)
                                            if pos == 1: placar[equipa] += 5
                                            elif pos == 2: placar[equipa] += 3
                                            elif pos in [3, 4]: placar[equipa] += 1
                                    
                                    placar_ordenado = sorted(placar.items(), key=lambda x: x[1], reverse=True)
                                    
                                    tabela_md = "| Posi√ß√£o | Equipa | Pontua√ß√£o Total |\n| :--- | :--- | :--- |\n"
                                    for i, (equipa, pontos) in enumerate(placar_ordenado):
                                        tabela_md += f"| {i+1} | {equipa} | {pontos} |\n"
                                        
                                    df_grafico = pd.DataFrame(placar_ordenado, columns=['Equipa', 'Pontuacao'])
                                    st.session_state['dominancia_df'] = df_grafico

                                    contexto = st.session_state['contexto_liga']
                                    prompt_final = f"""**TAREFA:** Voc√™ √© um analista de futebol... [Resto do prompt de gera√ß√£o final]..."""
                                    dossie_final = gerar_resposta_ia(prompt_final)
                                    st.session_state['dossie_final_completo'] = dossie_final
                                    st.rerun()

                            except (json.JSONDecodeError, TypeError) as e:
                                st.error(f"Falha ao processar os dados extra√≠dos das imagens: {e}")
                                st.text_area("Dados recebidos (para depura√ß√£o):", json_data_str)
                        else:
                            st.error("A extra√ß√£o de dados das imagens falhou.")

        # EXIBI√á√ÉO DO DOSSI√ä FINAL E GR√ÅFICO
        if 'dossie_final_completo' in st.session_state:
            st.markdown("---"); st.header("Dossi√™ Final Consolidado"); st.success("Dossi√™ gerado com sucesso!")
            dossie_markdown = st.session_state['dossie_final_completo']
            dominancia_df = st.session_state.get('dominancia_df')
            col1, col2 = st.columns([2, 1.2])
            with col1: st.markdown(dossie_markdown)
            with col2:
                if dominancia_df is not None and not dominancia_df.empty:
                    st.subheader("Visualiza√ß√£o da Domin√¢ncia")
                    
                    # --- CORRE√á√ÉO APLICADA AQUI ---
                    # Define uma cor expl√≠cita para as barras para garantir a visibilidade em temas escuros.
                    chart = alt.Chart(dominancia_df).mark_bar(
                        color='#4a90e2', # Uma cor azul clara e vis√≠vel
                        stroke='black', # Adiciona um contorno para defini√ß√£o
                        strokeWidth=0.5
                    ).encode(
                        x=alt.X('Pontuacao:Q', title='Pontua√ß√£o Total'),
                        y=alt.Y('Equipa:N', sort='-x', title='Equipa'),
                        tooltip=['Equipa', 'Pontuacao']
                    ).properties(
                        title='Placar de Domin√¢ncia na Liga'
                    ).configure_axis(
                        labelColor='white', # Cor dos r√≥tulos dos eixos
                        titleColor='white'  # Cor dos t√≠tulos dos eixos
                    ).configure_title(
                        color='white' # Cor do t√≠tulo do gr√°fico
                    ).configure_legend(
                        labelColor='white', # Cor da legenda
                        titleColor='white'
                    )

                    st.altair_chart(chart, use_container_width=True)
            if st.button("Limpar e Iniciar Nova An√°lise"):
                password_state = st.session_state.get("password_correct", False)
                st.session_state.clear()
                st.session_state["password_correct"] = password_state
                st.rerun()

    with tab2: st.info("Em desenvolvimento.")
    with tab3: st.info("Em desenvolvimento.")
    with tab4: st.info("Em desenvolvimento.")
