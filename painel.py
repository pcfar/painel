import streamlit as st
import os
from github import Github
from github.GithubException import UnknownObjectException
from datetime import datetime
from PIL import Image
import io
import requests
import json
import time
import base64
import pandas as pd
import altair as alt
import re

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="Painel T√°tico Final", page_icon="üìä", layout="wide")

# --- SISTEMA DE SENHA √öNICA ---
def check_password():
    if st.session_state.get("password_correct", False): return True
    def password_entered():
        if st.session_state.get("password") == st.secrets.get("APP_PASSWORD"):
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else: st.session_state["password_correct"] = False
    st.text_input("Password", type="password", on_change=password_entered, key="password")
    if "password_correct" in st.session_state and not st.session_state["password_correct"]:
        st.error("üòï Senha incorreta.")
    return False

# --- FUN√á√ïES DE CHAMADA √Ä IA (ESPECIALIZADAS) ---
def gerar_resposta_ia(prompt, imagens_bytes=None):
    api_key = st.secrets.get("GEMINI_API_KEY")
    if not api_key:
        st.error("Chave da API do Gemini n√£o encontrada.")
        return None
    
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key={api_key}"
    headers = {'Content-Type': 'application/json'}
    
    parts = [{"text": prompt}]
    if imagens_bytes:
        for imagem_bytes in imagens_bytes:
            encoded_image = base64.b64encode(imagem_bytes).decode('utf-8')
            parts.append({"inline_data": {"mime_type": "image/jpeg", "data": encoded_image}})
            
    tools = [{"google_search": {}}]
    data = {"contents": [{"parts": parts}], "tools": tools}
    
    try:
        response = requests.post(url, headers=headers, data=json.dumps(data), timeout=400)
        response.raise_for_status()
        result = response.json()
        if 'candidates' in result and result['candidates']:
            return result['candidates'][0]['content']['parts'][0]['text']
    except Exception as e:
        st.error(f"Erro na chamada √† API: {e}")
        st.error(f"Resposta recebida do servidor: {response.text if 'response' in locals() else 'N/A'}")
    return None

# --- APLICA√á√ÉO PRINCIPAL ---
if check_password():
    st.sidebar.success("Autenticado com sucesso.")
    st.title("SISTEMA DE INTELIG√äNCIA T√ÅTICA")
    
    st.header("Central de Comando")
    tab1, tab2, tab3, tab4 = st.tabs(["Dossi√™ 1 (Liga)", "Dossi√™ 2 (Clube)", "Dossi√™ 3 (P√≥s-Jogo)", "Dossi√™ 4 (Pr√©-Jogo)"])

    with tab1:
        st.info("O Dossi√™ de Liga est√° funcional.")

    with tab2:
        st.subheader("Criar Dossi√™ 2: An√°lise Profunda de Clube v6.0")

        if 'club_dossier_step_v6' not in st.session_state:
            st.session_state.club_dossier_step_v6 = 1

        # ETAPA 1: DEFINIR ALVO E PLANTEIS
        if st.session_state.club_dossier_step_v6 == 1:
            with st.form("form_clube_etapa1_v6"):
                st.markdown("**ETAPA 1: DEFINIR O ALVO E OS PLANTEIS**")
                equipa_nome = st.text_input("Nome da Equipa Alvo*", placeholder="Ex: Manchester City")
                link_plantel_anterior = st.text_input("Link do Plantel (Temporada Anterior)*", placeholder="Ex: https://www.transfermarkt.pt/.../2023")
                link_plantel_atual = st.text_input("Link do Plantel (Temporada Atual)*", placeholder="Ex: https://www.transfermarkt.pt/.../2024")
                
                if st.form_submit_button("Analisar Transfer√™ncias"):
                    if not all([equipa_nome, link_plantel_anterior, link_plantel_atual]):
                        st.error("Por favor, preencha todos os campos obrigat√≥rios.")
                    else:
                        st.session_state.equipa_alvo_v6 = equipa_nome
                        st.session_state.link_anterior_v6 = link_plantel_anterior
                        st.session_state.link_atual_v6 = link_plantel_atual
                        st.session_state.club_dossier_step_v6 = 2
                        st.rerun()

        # ETAPA 2: AN√ÅLISE DE TRANSFER√äNCIAS E APROFUNDAMENTO INDIVIDUAL
        if st.session_state.club_dossier_step_v6 == 2:
            with st.spinner(f"AGENTE DE INTELIG√äNCIA a comparar os planteis..."):
                prompt_transferencias = f"""
**TAREFA:** Aceda aos dois links de planteis do Transfermarkt e compare-os.
- Link Anterior: {st.session_state.link_anterior_v6}
- Link Atual: {st.session_state.link_atual_v6}

**ALGORITMO:**
1.  Identifique TODAS as chegadas e TODAS as sa√≠das.
2.  Escreva a sec√ß√£o "1. EVOLU√á√ÉO DO PLANTEL" em Markdown, incluindo a sua an√°lise de impacto.
3.  **IMPORTANTE:** Ap√≥s o Markdown, adicione um separador `---JSON_CHEGADAS---` e depois um bloco de c√≥digo JSON com uma lista dos nomes dos jogadores que chegaram. Ex: {{"chegadas": ["Jogador A", "Jogador B"]}}
"""
                analise_transferencias_raw = gerar_resposta_ia(prompt_transferencias)
                
                if analise_transferencias_raw and "---JSON_CHEGADAS---" in analise_transferencias_raw:
                    parts = analise_transferencias_raw.split("---JSON_CHEGADAS---")
                    st.session_state.analise_transferencias_md = parts[0]
                    
                    json_str = parts[1].strip()
                    try:
                        chegadas_data = json.loads(json_str)
                        st.session_state.lista_chegadas = chegadas_data.get("chegadas", [])
                    except json.JSONDecodeError:
                        st.session_state.lista_chegadas = []
                else:
                    st.session_state.analise_transferencias_md = "Falha ao analisar as transfer√™ncias. Verifique os links."
                    st.session_state.lista_chegadas = []

                st.session_state.club_dossier_step_v6 = 3
                st.rerun()

        if st.session_state.club_dossier_step_v6 == 3:
            st.markdown("### Parte 1: Evolu√ß√£o do Plantel")
            st.markdown(st.session_state.analise_transferencias_md)
            st.divider()

            with st.form("form_clube_etapa2_v6"):
                st.markdown("**ETAPA 2: APROFUNDAMENTO INDIVIDUAL (OPCIONAL)**")
                st.info("Para quais das novas contrata√ß√µes voc√™ gostaria de fornecer dados para um 'Mini Dossi√™'?")
                
                jogadores_selecionados = st.multiselect("Selecione os refor√ßos a analisar:", 
                                                       options=st.session_state.get('lista_chegadas', []))
                
                st.session_state.prints_jogadores = {}
                for jogador in jogadores_selecionados:
                    st.file_uploader(f"Carregar print de estat√≠sticas para **{jogador}** (√©poca anterior)", 
                                     key=f"print_{jogador}", 
                                     type=['png', 'jpg', 'jpeg'])

                if st.form_submit_button("Pr√≥ximo Passo: Dados Coletivos"):
                    # Guarda os prints carregados
                    for jogador in jogadores_selecionados:
                        if st.session_state[f"print_{jogador}"]:
                            st.session_state.prints_jogadores[jogador] = st.session_state[f"print_{jogador}"].getvalue()
                    
                    st.session_state.club_dossier_step_v6 = 4
                    st.rerun()

        # ETAPA 3: COLETA DE DADOS COLETIVOS
        if st.session_state.club_dossier_step_v6 == 4:
            st.markdown("### ETAPA 3: DADOS DE DESEMPENHO COLETIVO")
            with st.form("form_clube_etapa3_v6"):
                st.markdown("""
                **Instru√ß√µes:** Carregue os 3 prints sobre o desempenho da equipa na √©poca passada.
                - **Print A:** Vis√£o Geral e Performance Ofensiva (FBref)
                - **Print B:** Padr√µes de Constru√ß√£o de Jogo (FBref)
                - **Print C:** An√°lise Comparativa Casa vs. Fora (FBref)
                """)
                st.file_uploader("Carregar Prints da Equipa (A, B e C)*", 
                                 accept_multiple_files=True, 
                                 key="prints_equipa_v6")
                
                if st.form_submit_button("Gerar Dossi√™ Final Completo"):
                    if not st.session_state.prints_equipa_v6 or len(st.session_state.prints_equipa_v6) < 3:
                        st.error("Por favor, carregue os 3 prints da equipa.")
                    else:
                        st.session_state.club_dossier_step_v6 = 5
                        st.rerun()

        # ETAPA 4: GERA√á√ÉO FINAL
        if st.session_state.club_dossier_step_v6 == 5:
            with st.spinner(f"AGENTE DE INTELIG√äNCIA a consolidar todos os dados e a redigir o dossi√™ final..."):
                
                # Prepara todas as imagens para a API
                todas_imagens_bytes = []
                prompt_imagens_info = []

                # Adiciona prints dos jogadores individuais
                for jogador, img_bytes in st.session_state.get('prints_jogadores', {}).items():
                    todas_imagens_bytes.append(img_bytes)
                    prompt_imagens_info.append(f"- A imagem para o 'Mini Dossi√™' de **{jogador}** est√° inclu√≠da.")

                # Adiciona prints da equipa
                for i, print_file in enumerate(st.session_state.prints_equipa_v6):
                    todas_imagens_bytes.append(print_file.getvalue())
                    # Associa a imagem pela ordem de upload
                    letra_print = chr(ord('A') + i)
                    prompt_imagens_info.append(f"- A imagem do Print da Equipa **{letra_print}** est√° inclu√≠da.")

                prompt_imagens_info_str = "\n".join(prompt_imagens_info)

                prompt_final = f"""
**TAREFA CR√çTICA:** Aja como um Analista de Futebol de elite. Com base em TODA a informa√ß√£o fornecida, redija um dossi√™ profundo e coeso sobre o '{st.session_state.equipa_alvo_v6}'.

**INFORMA√á√ÉO DISPON√çVEL:**
1.  **An√°lise de Transfer√™ncias Inicial:**
    {st.session_state.analise_transferencias_md}
2.  **Dados Visuais (Prints):**
    {prompt_imagens_info_str}

**ALGORITMO DE EXECU√á√ÉO:**
1.  **Mini Dossi√™s:** Para cada jogador com um print fornecido, analise as suas estat√≠sticas da √©poca passada e escreva o "Mini Dossi√™ de Contrata√ß√£o".
2.  **An√°lise Coletiva:** Analise os prints da equipa (A, B, C) para escrever a sec√ß√£o "DNA DO DESEMPENHO".
3.  **Consolida√ß√£o:** Junte tudo no **MODELO OBRIGAT√ìRIO** abaixo, garantindo que a sua an√°lise conecta todos os pontos de forma inteligente (ex: como os "Mini Dossi√™s" dos refor√ßos impactam a "Proje√ß√£o T√°tica").

---
**MODELO OBRIGAT√ìRIO:**

### **DOSSI√ä ESTRAT√âGICO DE CLUBE: {st.session_state.equipa_alvo_v6.upper()}**

{st.session_state.analise_transferencias_md}

* **Mini Dossi√™s de Contrata√ß√£o:**
    [Para cada jogador com print, escreva aqui a an√°lise individual]

**2. DNA DO DESEMPENHO (TEMPORADA ANTERIOR)**
* **Raio-X Estat√≠stico:** [Tabela com m√©tricas extra√≠das dos prints da equipa]
* **Padr√µes de Jogo Identificados:** [An√°lise dos dados da tabela]
* **An√°lise Comparativa Casa vs. Fora:** [An√°lise dos dados de casa/fora]

**3. O PLANO DE JOGO (AN√ÅLISE T√ÅTICA)**
* **Modelo de Jogo Principal:** [Descri√ß√£o da t√°tica]
* **Protagonistas e Destaques:** [Jogadores influentes da √©poca passada]
* **Proje√ß√£o T√°tica para a Nova Temporada:** [Proje√ß√£o t√°tica considerando as transfer√™ncias e os perfis dos novos jogadores]

**4. VEREDITO FINAL E CEN√ÅRIOS DE OBSERVA√á√ÉO**
* **S√≠ntese Anal√≠tica:** [O resumo inteligente]
* **Cen√°rios de Monitoramento:** [3 cen√°rios pr√°ticos]
"""
                dossie_final = gerar_resposta_ia(prompt_final, todas_imagens_bytes)
                st.session_state.dossie_clube_final_v6 = dossie_final or "Falha na gera√ß√£o final."
                st.session_state.club_dossier_step_v6 = 6
                st.rerun()

        if st.session_state.club_dossier_step_v6 == 6:
            st.header(f"Dossi√™ Final: {st.session_state.equipa_alvo_v6}")
            st.markdown(st.session_state.dossie_clube_final_v6)
            if st.button("Limpar e Analisar Outro Clube"):
                keys_to_delete = [k for k in st.session_state if k.endswith('_v6')]
                for key in keys_to_delete:
                    del st.session_state[key]
                st.rerun()

    with tab3: st.info("Em desenvolvimento.")
    with tab4: st.info("Em desenvolvimento.")
