import streamlit as stimport osfrom github import Githubfrom github.GithubException import UnknownObjectExceptionfrom datetime import datetimeimport pytesseractfrom PIL import Imageimport io--- Configura√ß√£o da P√°gina ---st.set_page_config(page_title="Painel T√°tico v7.0", page_icon="üß†", layout="wide")--- SISTEMA DE SENHA √öNICA ---def check_password():if st.session_state.get("password_correct", False): return Truedef password_entered():if st.session_state.get("password") == st.secrets.get("APP_PASSWORD"):st.session_state["password_correct"] = Truedel st.session_state["password"]else: st.session_state["password_correct"] = Falsest.text_input("Password", type="password", on_change=password_entered, key="password")if "password_correct" in st.session_state and not st.session_state["password_correct"]:st.error("üòï Senha incorreta.")return False--- APLICA√á√ÉO PRINCIPAL ---if check_password():st.sidebar.success("Autenticado com sucesso.")st.title("SISTEMA DE INTELIG√äNCIA T√ÅTICA")# --- Conex√£o com o GitHub ---
@st.cache_resource
def get_github_connection():
    try:
        g = Github(st.secrets["GITHUB_TOKEN"])
        repo = g.get_repo("pcfar/painel")
        return repo
    except Exception:
        st.error("Erro ao conectar com o GitHub.")
        st.stop()
repo = get_github_connection()

# --- CENTRAL DE COMANDO COM ABAS ---
st.header("Central de Comando")

tab1, tab2, tab3, tab4 = st.tabs(["Dossi√™ 1 (Liga)", "Dossi√™ 2 (Clube)", "Dossi√™ 3 (P√≥s-Jogo)", "Dossi√™ 4 (Pr√©-Jogo)"])

with tab1:
    st.subheader("Criar Dossi√™ 1: An√°lise Geral da Liga (Modelo H√≠brido)")
    with st.form("form_dossie_1_hibrido"):
        st.write("Forne√ßa o contexto e os 'prints' com dados t√©cnicos. A IA ser√° respons√°vel pela pesquisa de dados hist√≥ricos e contextuais.")
        
        # Inputs de Contexto
        temporada = st.text_input("Temporada de Refer√™ncia*", placeholder="Ex: 2024-2025")
        liga = st.text_input("Liga (c√≥digo)*", placeholder="Ex: HOL")
        pais = st.text_input("Pa√≠s*", placeholder="Ex: Holanda")
        st.markdown("---")

        # Campos de Upload Guiados (agora apenas para dados t√©cnicos)
        print_classificacao = st.file_uploader("1) Print da Tabela de Classifica√ß√£o Final*", help="Sugest√£o: No Sofascore ou FBref, capture a tabela de classifica√ß√£o completa da √∫ltima temporada.", accept_multiple_files=True)
        print_stats = st.file_uploader("2) Print das Estat√≠sticas Avan√ßadas das Equipes*", help="Sugest√£o: No FBref, na p√°gina da temporada, capture a tabela 'Squad Advanced Stats'.", accept_multiple_files=True)
        
        if st.form_submit_button("Processar Prints e Preparar Prompt H√≠brido para IA"):
            if not all([temporada, liga, pais, print_classificacao, print_stats]):
                st.error("Por favor, preencha todos os campos obrigat√≥rios (*).")
            else:
                with st.spinner("AGENTE DE COLETA a processar 'prints' t√©cnicos..."):
                    try:
                        # Agrupar e fazer OCR dos prints t√©cnicos
                        grupos_de_prints = {
                            "TABELA DE CLASSIFICA√á√ÉO FINAL": print_classificacao,
                            "ESTAT√çSTICAS AVAN√áADAS": print_stats
                        }
                        texto_final_para_prompt = ""
                        for nome_grupo, prints in grupos_de_prints.items():
                            if prints:
                                texto_final_para_prompt += f"\n--- [IN√çCIO DOS DADOS DO UTILIZADOR: {nome_grupo}] ---\n"
                                for print_file in prints:
                                    imagem = Image.open(print_file)
                                    texto_final_para_prompt += pytesseract.image_to_string(imagem, lang='por+eng') + "\n"
                                texto_final_para_prompt += f"--- [FIM DOS DADOS DO UTILIZADOR: {nome_grupo}] ---\n"

                        # Construir o Prompt Mestre H√≠brido
                        data_hoje = datetime.now().strftime("%d/%m/%Y")
                        prompt_mestre = f"""
PERSONA: Voc√™ √© um Analista de Futebol S√™nior, com dupla especialidade: pesquisa de contexto hist√≥rico e an√°lise de dados de performance.CONTEXTO:Liga para An√°lise: {liga.upper()}Pa√≠s: {pais}Temporada de Refer√™ncia: {temporada}TAREFAS:Sua miss√£o √© gerar um Dossi√™ de Liga completo. Execute as seguintes tarefas em ordem:TAREFA 1 (Pesquisa Aut√≥noma): Realize buscas na web para obter as informa√ß√µes necess√°rias para a "PARTE 1" do dossi√™. Fontes priorit√°rias: Wikipedia, site oficial da liga, principais media desportivos do {pais}. Foque em encontrar:A lista de campe√µes da {liga.upper()} na √∫ltima d√©cada.Curiosidades, recordes ou factos hist√≥ricos relevantes sobre a liga.TAREFA 2 (An√°lise de Dados Fornecidos): Abaixo est√£o os dados brutos extra√≠dos via OCR de "prints" fornecidos pelo utilizador. Use estes dados para realizar a "PARTE 2" do dossi√™.{texto_final_para_prompt}TAREFA 3 (Consolida√ß√£o): Junte os resultados das Tarefas 1 e 2 e preencha o "MODELO DE SA√çDA" abaixo de forma completa e estruturada.MODELO DE SA√çDA (Use esta estrutura Markdown):DOSSI√ä ESTRAT√âGICO DE LIGA: {liga.upper()}TEMPORADA DE REFER√äNCIA PARA AN√ÅLISE: {temporada} DATA DA GERA√á√ÉO DO RELAT√ìRIO: {data_hoje}PARTE 1: VIS√ÉO GERAL E HIST√ìRICA DA LIGA (Dados da Pesquisa Aut√≥noma)Domin√¢ncia Hist√≥rica (√öltima D√©cada): [Liste os campe√µes encontrados na sua pesquisa.]Fatos e Curiosidades Relevantes: [Resuma os factos interessantes encontrados na sua pesquisa.]PARTE 2: AN√ÅLISE T√âCNICA (Dados dos Prints do Utilizador)Panorama da √öltima Temporada: [Fa√ßa um breve resumo com base na tabela de classifica√ß√£o fornecida.]Identifica√ß√£o de Equipes Dominantes: [Com base na tabela E nas estat√≠sticas avan√ßadas fornecidas, liste as 3-4 equipes que se destacaram e justifique brevemente.]VEREDITO FINAL: PLAYLIST DE MONITORAMENTOAs seguintes equipes s√£o selecionadas como alvos prim√°rios para monitoramento:1. [Nome da Equipe 1]2. [Nome da Equipe 2]3. [Nome da Equipe 3]"""st.session_state['prompt_gerado'] = prompt_mestreexcept Exception as e:st.error(f"Ocorreu um erro durante o OCR ou constru√ß√£o do prompt: {e}")    if 'prompt_gerado' in st.session_state:
        st.success("Processamento conclu√≠do. O 'Prompt Mestre H√≠brido' est√° pronto.")
        st.info("Copie o prompt abaixo e envie para o seu assistente de IA para a gera√ß√£o final do dossi√™.")
        st.text_area("Prompt Mestre para IA:", st.session_state['prompt_gerado'], height=400)
        if st.button("Limpar e Iniciar Nova An√°lise"):
            del st.session_state['prompt_gerado']
            st.rerun()

with tab2:
    st.info("Formul√°rio para o Dossi√™ 2 em desenvolvimento.")
with tab3:
    st.info("Formul√°rio para o Dossi√™ 3 em desenvolvimento.")
with tab4:
    st.info("Formul√°rio para o Dossi√™ 4 em desenvolvimento.")
