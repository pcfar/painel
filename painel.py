import streamlit as st
import os
from github import Github
from github.GithubException import UnknownObjectException
from datetime import datetime
from PIL import Image
import io
import requests
import json
import time
import base64
import pandas as pd
import altair as alt

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="Painel T√°tico Final", page_icon="üìä", layout="wide")

# --- SISTEMA DE SENHA √öNICA ---
def check_password():
    if st.session_state.get("password_correct", False): return True
    def password_entered():
        if st.session_state.get("password") == st.secrets.get("APP_PASSWORD"):
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else: st.session_state["password_correct"] = False
    st.text_input("Password", type="password", on_change=password_entered, key="password")
    if "password_correct" in st.session_state and not st.session_state["password_correct"]:
        st.error("üòï Senha incorreta.")
    return False

# --- FUN√á√ïES DE CHAMADA √Ä IA (ESPECIALIZADAS) ---
def gerar_resposta_ia(prompt, imagens_bytes=None):
    api_key = st.secrets.get("GEMINI_API_KEY")
    if not api_key:
        st.error("Chave da API do Gemini n√£o encontrada.")
        return None
    
    # O modelo Gemini 1.5 Pro √© mais indicado para tarefas complexas como esta
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent?key={api_key}"
    headers = {'Content-Type': 'application/json'}
    
    parts = [{"text": prompt}]
    if imagens_bytes:
        for imagem_bytes in imagens_bytes:
            encoded_image = base64.b64encode(imagem_bytes).decode('utf-8')
            parts.append({"inline_data": {"mime_type": "image/jpeg", "data": encoded_image}})
            
    # Habilita a ferramenta de busca na web para a IA poder aceder aos links
    tools = [{"google_search": {"type": "retrieval"}}]
    
    data = {"contents": [{"parts": parts}], "tools": tools}
    
    try:
        response = requests.post(url, headers=headers, data=json.dumps(data), timeout=400) # Timeout aumentado
        response.raise_for_status()
        result = response.json()
        if 'candidates' in result and result['candidates']:
            return result['candidates'][0]['content']['parts'][0]['text']
    except Exception as e:
        st.error(f"Erro na chamada √† API: {e}")
        st.error(f"Resposta recebida do servidor: {response.text if 'response' in locals() else 'N/A'}")
    return None

# --- APLICA√á√ÉO PRINCIPAL ---
if check_password():
    st.sidebar.success("Autenticado com sucesso.")
    st.title("SISTEMA DE INTELIG√äNCIA T√ÅTICA")

    @st.cache_resource
    def get_github_connection():
        # ... (c√≥digo do GitHub sem altera√ß√µes)
        pass
    
    st.header("Central de Comando")
    tab1, tab2, tab3, tab4 = st.tabs(["Dossi√™ 1 (Liga)", "Dossi√™ 2 (Clube)", "Dossi√™ 3 (P√≥s-Jogo)", "Dossi√™ 4 (Pr√©-Jogo)"])

    # --- ABA 1: DOSSI√ä DE LIGA ---
    with tab1:
        st.info("O Dossi√™ de Liga est√° funcional. Use esta aba para analisar uma liga inteira.")
        # O c√≥digo completo da Aba 1, que j√° est√° est√°vel, seria mantido aqui.
        # Por uma quest√£o de clareza, foi omitido desta visualiza√ß√£o.

    # --- ABA 2: DOSSI√ä DE CLUBE (MODELO ORIENTADO PELO ANALISTA) ---
    with tab2:
        st.subheader("Criar Dossi√™ 2: An√°lise Profunda de Clube v3.0")

        if 'dossie_clube_final_v3' not in st.session_state:
            with st.form("form_clube_v3"):
                st.markdown("**FASE 1: INPUTS DO ANALISTA**")
                st.info("Forne√ßa as fontes de dados prim√°rias para a IA processar. A precis√£o da an√°lise depende da qualidade dos seus inputs.")

                equipa_nome = st.text_input("Nome da Equipa Alvo*", placeholder="Ex: Manchester City")
                
                st.markdown("<h6>Links dos Planteis (Transfermarkt ou similar)</h6>", unsafe_allow_html=True)
                link_plantel_anterior = st.text_input("Link do Plantel (Temporada Anterior)*", placeholder="Ex: https://www.transfermarkt.pt/manchester-city/kader/verein/281/saison_id/2023")
                link_plantel_atual = st.text_input("Link do Plantel (Temporada Atual)*", placeholder="Ex: https://www.transfermarkt.pt/manchester-city/kader/verein/281/saison_id/2024")

                st.markdown("<h6>Prints de Desempenho (FBref, Sofascore, etc.)</h6>", unsafe_allow_html=True)
                prints_desempenho = st.file_uploader("Carregue os prints com as estat√≠sticas detalhadas da temporada anterior*", 
                                                     accept_multiple_files=True, 
                                                     key="prints_clube")

                if st.form_submit_button("Gerar An√°lise do Clube"):
                    if not all([equipa_nome, link_plantel_anterior, link_plantel_atual, prints_desempenho]):
                        st.error("Por favor, preencha todos os campos obrigat√≥rios (*).")
                    else:
                        with st.spinner(f"AGENTE DE INTELIG√äNCIA a processar os dados sobre o {equipa_nome}... Este processo √© complexo e pode demorar alguns minutos."):
                            lista_imagens_bytes = [p.getvalue() for p in prints_desempenho]
                            
                            prompt_final = f"""
**TAREFA CR√çTICA:** Aja como um Analista de Futebol de elite. A sua √∫nica fun√ß√£o √© processar os dados fornecidos e redigir um dossi√™ t√°tico profundo sobre o clube '{equipa_nome}'. N√ÉO use nenhum conhecimento pr√©vio que tenha. Baseie-se APENAS nas fontes fornecidas.

**ALGORITMO DE EXECU√á√ÉO OBRIGAT√ìRIO:**

**1. COMPARA√á√ÉO DE PLANTEIS (Fontes: Links)**
   - ACEDA ao link da temporada anterior: {link_plantel_anterior}
   - ACEDA ao link da temporada atual: {link_plantel_atual}
   - COMPARE as duas listas de jogadores e identifique TODAS as sa√≠das e TODAS as chegadas. Ignore jogadores que regressam de empr√©stimo, a menos que sejam relevantes.
   - ESTRUTURE esta informa√ß√£o para a sec√ß√£o "Balan√ßo de Transfer√™ncias".

**2. EXTRA√á√ÉO DE DADOS DE DESEMPENHO (Fontes: Imagens)**
   - ANALISE CADA imagem fornecida.
   - EXTRAIA as principais m√©tricas estat√≠sticas da temporada anterior (xG, posse de bola, finaliza√ß√µes, desempenho em casa vs. fora, etc.).
   - ESTRUTURE estes dados para a sec√ß√£o "Raio-X Estat√≠stico" e use-os para escrever a an√°lise dos "Padr√µes de Jogo".

**3. REDA√á√ÉO DO DOSSI√ä**
   - Com todos os dados extra√≠dos e estruturados, REDIJA o dossi√™ final seguindo o **MODELO OBRIGAT√ìRIO** abaixo.
   - A sua an√°lise deve CONECTAR os pontos. Por exemplo, como as transfer√™ncias (ponto 1) podem impactar os padr√µes de desempenho (ponto 2) e o modelo de jogo projetado.

---
**MODELO OBRIGAT√ìRIO (Use este formato exato):**

### **DOSSI√ä ESTRAT√âGICO DE CLUBE: {equipa_nome.upper()}**

**1. EVOLU√á√ÉO DO PLANTEL (AN√ÅLISE COMPARATIVA)**
* **Balan√ßo de Transfer√™ncias (Factos):**
    * **Lista Completa de Chegadas:** [Liste aqui as chegadas identificadas no passo 1]
    * **Lista Completa de Sa√≠das:** [Liste aqui as sa√≠das identificadas no passo 1]
* **An√°lise de Impacto (Ganhos e Perdas):**
    * [Escreva a sua an√°lise qualitativa sobre o que a equipa ganha com os refor√ßos]
    * [Escreva a sua an√°lise qualitativa sobre o que a equipa perde com as sa√≠das]

**2. DNA DO DESEMPENHO (TEMPORADA ANTERIOR)**
* **Raio-X Estat√≠stico:** [Crie uma tabela com as principais m√©tricas extra√≠das dos prints]
* **Padr√µes de Jogo Identificados:** [Analise os dados da tabela. A equipa √© dominante? Tem dificuldade em criar? etc.]
* **An√°lise Comparativa Casa vs. Fora:** [Analise os padr√µes de desempenho em casa e fora, com base nos dados dos prints]

**3. O PLANO DE JOGO (AN√ÅLISE T√ÅTICA)**
* **Modelo de Jogo Principal:** [Descreva a forma√ß√£o e o estilo de jogo mais utilizados na temporada anterior]
* **Protagonistas e Destaques:** [Identifique os jogadores mais influentes estatisticamente]
* **Proje√ß√£o T√°tica para a Nova Temporada:** [Conecte as transfer√™ncias com o modelo de jogo e projete poss√≠veis mudan√ßas t√°ticas]

**4. VEREDITO FINAL E CEN√ÅRIOS DE OBSERVA√á√ÉO**
* **S√≠ntese Anal√≠tica:** [O resumo inteligente que conecta todos os pontos do dossi√™]
* **Cen√°rios de Monitoramento:** [Crie 3 cen√°rios pr√°ticos e detalhados para observar nos primeiros jogos da nova temporada]
"""
                            dossie_final = gerar_resposta_ia(prompt_final, lista_imagens_bytes)
                            if dossie_final and "dossi√™ estrat√©gico de clube" in dossie_final.lower():
                                st.session_state['dossie_clube_final_v3'] = dossie_final
                                st.rerun()
                            else:
                                st.error("A gera√ß√£o do dossi√™ falhou. A IA pode ter tido dificuldade em aceder aos links ou processar as imagens. Verifique os links e tente novamente.")
                                st.text_area("Resposta recebida (para depura√ß√£o):", dossie_final or "Nenhuma resposta", height=200)

        # --- Exibi√ß√£o do Dossi√™ de Clube Final ---
        if 'dossie_clube_final_v3' in st.session_state:
            st.markdown("---")
            st.header("Dossi√™ de Clube Gerado")
            st.success("An√°lise conclu√≠da com sucesso!")
            st.markdown(st.session_state['dossie_clube_final_v3'])

            if st.button("Limpar e Analisar Outro Clube"):
                if 'dossie_clube_final_v3' in st.session_state:
                    del st.session_state['dossie_clube_final_v3']
                st.rerun()

    with tab3: st.info("Em desenvolvimento.")
    with tab4: st.info("Em desenvolvimento.")
