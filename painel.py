import streamlit as st
import os
from github import Github
from github.GithubException import UnknownObjectException
from datetime import datetime
from PIL import Image
import io
import requests
import json
import time
import base64

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="Painel T√°tico Final", page_icon="üß†", layout="wide")

# --- SISTEMA DE SENHA √öNICA ---
def check_password():
    if st.session_state.get("password_correct", False): return True
    def password_entered():
        if st.session_state.get("password") == st.secrets.get("APP_PASSWORD"):
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else: st.session_state["password_correct"] = False
    st.text_input("Password", type="password", on_change=password_entered, key="password")
    if "password_correct" in st.session_state and not st.session_state["password_correct"]:
        st.error("üòï Senha incorreta.")
    return False

# --- FUN√á√ïES DE CHAMADA √Ä IA (ESPECIALIZADAS) ---

# Fun√ß√£o Otimizada APENAS para gerar texto
def gerar_texto_com_ia(prompt):
    api_key = st.secrets.get("GEMINI_API_KEY")
    if not api_key:
        st.error("Chave da API do Gemini n√£o encontrada.")
        return None
    
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={api_key}"
    headers = {'Content-Type': 'application/json'}
    data = {"contents": [{"parts": [{"text": prompt}]}]}

    try:
        response = requests.post(url, headers=headers, data=json.dumps(data), timeout=180)
        response.raise_for_status()
        result = response.json()
        if 'candidates' in result and result['candidates'] and 'content' in result['candidates'][0] and 'parts' in result['candidates'][0]['content'] and result['candidates'][0]['content']['parts']:
            return result['candidates'][0]['content']['parts'][0]['text']
        else:
            st.error("Resposta da IA recebida, mas em formato inesperado.")
            st.json(result)
            return None
    except requests.exceptions.RequestException as e:
        st.error(f"Erro na chamada √† API: {e}")
        return None
    except (KeyError, IndexError) as e:
        st.error(f"Erro ao processar a resposta da IA: {e}")
        return None

# Fun√ß√£o Otimizada para gerar texto A PARTIR DE TEXTO + IMAGENS
def gerar_dossie_com_ia_multimodal(prompt_texto, lista_imagens_bytes):
    api_key = st.secrets.get("GEMINI_API_KEY")
    if not api_key:
        st.error("Chave da API do Gemini n√£o encontrada.")
        return None

    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={api_key}"
    headers = {'Content-Type': 'application/json'}
    
    parts = [{"text": prompt_texto}]
    for imagem_bytes in lista_imagens_bytes:
        encoded_image = base64.b64encode(imagem_bytes).decode('utf-8')
        parts.append({"inline_data": {"mime_type": "image/jpeg", "data": encoded_image}})

    data = {"contents": [{"parts": parts}]}

    try:
        response = requests.post(url, headers=headers, data=json.dumps(data), timeout=300)
        response.raise_for_status()
        result = response.json()
        if 'candidates' in result and result['candidates'] and 'content' in result['candidates'][0] and 'parts' in result['candidates'][0]['content'] and result['candidates'][0]['content']['parts']:
            return result['candidates'][0]['content']['parts'][0]['text']
        else:
            st.error("Resposta da IA (multimodal) em formato inesperado.")
            st.json(result)
            return None
    except requests.exceptions.RequestException as e:
        st.error(f"Erro na chamada √† API (multimodal): {e}")
        return None
    except (KeyError, IndexError) as e:
        st.error(f"Erro ao processar a resposta da IA (multimodal): {e}")
        return None

# --- APLICA√á√ÉO PRINCIPAL ---
if check_password():
    st.sidebar.success("Autenticado com sucesso.")
    st.title("SISTEMA DE INTELIG√äNCIA T√ÅTICA")

    @st.cache_resource
    def get_github_connection():
        try:
            g = Github(st.secrets["GITHUB_TOKEN"])
            repo = g.get_repo("pcfar/painel")
            return repo
        except Exception as e:
            st.error(f"Erro ao conectar com o GitHub: {e}")
            st.stop()
    repo = get_github_connection()

    st.header("Central de Comando")
    tab1, tab2, tab3, tab4 = st.tabs(["Dossi√™ 1 (Liga)", "Dossi√™ 2 (Clube)", "Dossi√™ 3 (P√≥s-Jogo)", "Dossi√™ 4 (Pr√©-Jogo)"])

    with tab1:
        st.subheader("Criar Dossi√™ 1: An√°lise Geral da Liga")

        # --- FASE 1: GERA√á√ÉO DO PANORAMA DA LIGA ---
        if 'dossie_p1_resultado' not in st.session_state:
            with st.form("form_dossie_1_p1"):
                st.markdown("**Parte 1: Panorama da Liga (Pesquisa Aut√≥noma da IA)**")
                liga = st.text_input("Liga (nome completo)*", placeholder="Ex: Premier League")
                pais = st.text_input("Pa√≠s*", placeholder="Ex: Inglaterra")
                
                if st.form_submit_button("Gerar Panorama da Liga"):
                    if not all([liga, pais]):
                        st.error("Por favor, preencha todos os campos obrigat√≥rios (*).")
                    else:
                        with st.spinner("AGENTE DE INTELIG√äNCIA a pesquisar e redigir o panorama da liga..."):
                            prompt_p1 = f"""
**PERSONA:** Voc√™ √© um Jornalista Investigativo e Historiador de Futebol, com um talento para encontrar detalhes que cativem o leitor.
**CONTEXTO:** Liga para An√°lise: {liga}, Pa√≠s: {pais}
**MISS√ÉO:** Realize uma pesquisa aprofundada na web para criar a "PARTE 1" de um Dossi√™ Estrat√©gico sobre a {liga}. O seu relat√≥rio deve ser rico em informa√ß√µes, curiosidades e detalhes espec√≠ficos.
**DIRETRIZES DE PESQUISA (Busque por estes t√≥picos e SEJA ESPEC√çFICO):**
1. Domin√¢ncia Hist√≥rica: Quem s√£o os maiores campe√µes e como se distribui o poder na √∫ltima d√©cada.
2. Grandes Rivalidades: Quais s√£o os cl√°ssicos mais importantes e o que eles representam.
3. √çdolos e Lendas: Mencione 2-3 jogadores hist√≥ricos que marcaram a liga, **indicando os clubes onde se destacaram**.
4. Estilo de Jogo Caracter√≠stico: A liga √© conhecida por ser ofensiva, defensiva, t√°tica? D√™ exemplos.
5. Fatos e Curiosidades: Encontre 2-3 factos √∫nicos ou recordes impressionantes, **citando os clubes ou jogadores envolvidos**.
**MODELO DE SA√çDA:**
---
#### **PARTE 1: VIS√ÉO GERAL E HIST√ìRICA DA LIGA - {liga.upper()}**
* **Perfil da Liga:** [Resumo sobre o estilo de jogo.]
* **Domin√¢ncia na D√©cada:** [An√°lise da distribui√ß√£o de poder.]
* **Principais Rivalidades:** [Descri√ß√£o dos cl√°ssicos.]
* **Lendas da Liga:** [Men√ß√£o aos jogadores e seus clubes.]
* **Curiosidades e Recordes:** [Apresenta√ß√£o dos factos interessantes com detalhes.]
---
"""
                            resultado_p1 = gerar_texto_com_ia(prompt_p1)
                            
                            # --- CORRE√á√ÉO APLICADA AQUI ---
                            # Valida√ß√£o mais flex√≠vel, baseada no conte√∫do e n√£o na formata√ß√£o exata.
                            # Verifica se a resposta cont√©m os elementos chave esperados para a Parte 1.
                            if resultado_p1 and "parte 1" in resultado_p1.lower() and "vis√£o geral" in resultado_p1.lower():
                                st.session_state['dossie_p1_resultado'] = resultado_p1
                                st.session_state['contexto_liga'] = {'liga': liga, 'pais': pais}
                                st.rerun()
                            else:
                                st.error("A gera√ß√£o da Parte 1 falhou ou retornou uma resposta inv√°lida. Por favor, tente novamente.")
                                st.text_area("Resposta recebida da IA:", resultado_p1 or "Nenhuma resposta.", height=150)

        # --- FASE 2: UPLOAD DAS IMAGENS E GERA√á√ÉO FINAL ---
        if 'dossie_p1_resultado' in st.session_state and 'dossie_final_completo' not in st.session_state:
            st.markdown("---")
            st.success("Parte 1 (Panorama da Liga) gerada com sucesso!")
            st.markdown(st.session_state['dossie_p1_resultado'])
            st.markdown("---")
            st.subheader("Parte 2: An√°lise T√©cnica via Upload de Imagens")
            with st.form("form_dossie_1_p2"):
                st.write("Fa√ßa o upload das imagens das tabelas de classifica√ß√£o. A IA ir√° analis√°-las diretamente.")
                prints_classificacao = st.file_uploader(
                    "Prints das Classifica√ß√µes das √öltimas Temporadas*",
                    help="Capture as tabelas de classifica√ß√£o completas. A IA ir√° 'ler' as imagens.",
                    accept_multiple_files=True,
                    key="prints_gerais"
                )
                if st.form_submit_button("Analisar Imagens e Gerar Dossi√™ Final"):
                    if not prints_classificacao:
                        st.error("Por favor, fa√ßa o upload de pelo menos uma imagem.")
                    else:
                        with st.spinner("AGENTE DE INTELIG√äNCIA a 'ler' as imagens e a finalizar o dossi√™..."):
                            lista_imagens_bytes = [p.getvalue() for p in prints_classificacao]
                            contexto = st.session_state['contexto_liga']
                            prompt_final = f"""
**PERSONA:** Voc√™ √© um Analista de Dados Quantitativo e um Especialista em Futebol, com uma capacidade excecional para interpretar dados visuais (imagens de tabelas) e apresentar conclus√µes claras.
**CONTEXTO:** Voc√™ recebeu duas fontes de informa√ß√£o para criar um dossi√™ sobre a liga '{contexto['liga']}':
1.  **An√°lise Qualitativa (Parte 1):** Um resumo textual sobre a liga que voc√™ mesmo gerou.
2.  **Dados Visuais (Imagens):** Uma s√©rie de imagens, cada uma contendo uma tabela de classifica√ß√£o de uma temporada diferente.
**MISS√ÉO FINAL:** Sua miss√£o √© analisar CADA imagem fornecida, extrair os dados quantitativos, e consolidar tudo num √∫nico dossi√™ coerente.
**PROCESSO PASSO A PASSO (SIGA RIGOROSAMENTE):**
**PASSO 1: An√°lise Visual e Extra√ß√£o de Dados**
* Para CADA imagem que eu lhe enviei:
    * **Identifique a temporada** (ex: 2022/2023, 2021-22) olhando para o conte√∫do da imagem.
    * **Extraia a classifica√ß√£o final.** Foque-se em: **Posi√ß√£o, Nome da Equipa**. Ignore colunas de pontos, golos, etc., a menos que precise delas para desempatar.
    * Se uma imagem for ileg√≠vel ou n√£o contiver uma tabela de classifica√ß√£o, ignore-a e fa√ßa uma nota mental.
**PASSO 2: C√°lculo do 'Placar de Domin√¢ncia'**
* Depois de analisar TODAS as imagens e extrair os dados, crie uma pontua√ß√£o para cada equipa com base na seguinte regra:
    * **1¬∫ Lugar (Campe√£o):** 5 pontos
    * **2¬∫ Lugar:** 3 pontos
    * **3¬∫ ou 4¬∫ Lugar:** 1 ponto
* Some os pontos de cada equipa ao longo de todas as temporadas que conseguiu analisar.
**PASSO 3: Gera√ß√£o do Dossi√™ Final**
* Use o modelo de sa√≠da abaixo para estruturar a sua resposta.
* **Parte 1:** Copie na √≠ntegra a an√°lise qualitativa que voc√™ j√° possui.
* **Parte 2:**
    * Apresente a tabela do **'Placar de Domin√¢ncia'** que voc√™ calculou, ordenada da maior para a menor pontua√ß√£o.
    * Escreva uma **'An√°lise do Analista'**, justificando as conclus√µes tiradas da tabela.
* **Veredito Final:** Com base em TUDO (an√°lise qualitativa e a sua nova an√°lise quantitativa das imagens), liste as 3 a 5 equipas mais relevantes para monitoriza√ß√£o.
**DADOS DISPON√çVEIS PARA A SUA AN√ÅLISE:**
**1. An√°lise Qualitativa (Parte 1 - Texto):**
{st.session_state['dossie_p1_resultado']}
**2. Dados Visuais (Parte 2 - Imagens):**
[As imagens que lhe enviei a seguir a este texto s√£o os seus dados visuais. Analise-as agora.]
**MODELO DE SA√çDA OBRIGAT√ìRIO:**
---
### **DOSSI√ä ESTRAT√âGICO DE LIGA: {contexto['liga'].upper()}**
**DATA DE GERA√á√ÉO:** {datetime.now().strftime('%d/%m/%Y')}
---
#### **PARTE 1: VIS√ÉO GERAL E HIST√ìRICA**
[Copie e cole a an√°lise informativa da Parte 1 aqui.]
---
#### **PARTE 2: AN√ÅLISE T√âCNICA E IDENTIFICA√á√ÉO DE ALVOS**
**Placar de Domin√¢ncia (Baseado na an√°lise das imagens fornecidas):**
| Posi√ß√£o | Equipa | Pontua√ß√£o Total |
| :--- | :--- | :--- |
| 1 | [Sua an√°lise aqui] | [Pts] |
| 2 | [Sua an√°lise aqui] | [Pts] |
| ... | ... | ... |
**An√°lise do Analista:**
[A sua an√°lise e justificativa aqui. Comente os resultados da tabela de domin√¢ncia.]
---
#### **VEREDITO FINAL: PLAYLIST DE MONITORAMENTO**
* **1. [Equipa 1]:** [Breve justificativa baseada na sua an√°lise completa.]
* **2. [Equipa 2]:** [Breve justificativa baseada na sua an√°lise completa.]
* **3. [Equipa 3]:** [Breve justificativa baseada na sua an√°lise completa.]
---
"""
                            dossie_final = gerar_dossie_com_ia_multimodal(prompt_final, lista_imagens_bytes)
                            if dossie_final:
                                st.session_state['dossie_final_completo'] = dossie_final
                                st.rerun()
                            else:
                                st.error("A gera√ß√£o do dossi√™ final falhou. Verifique os logs de erro.")

        # --- EXIBI√á√ÉO DO DOSSI√ä FINAL ---
        if 'dossie_final_completo' in st.session_state:
            st.markdown("---")
            st.header("Dossi√™ Final Consolidado")
            st.success("Dossi√™ gerado com sucesso!")
            st.markdown(st.session_state['dossie_final_completo'])
            if st.button("Limpar e Iniciar Nova An√°lise"):
                password_state = st.session_state.get("password_correct", False)
                st.session_state.clear()
                st.session_state["password_correct"] = password_state
                st.rerun()

    with tab2: st.info("Em desenvolvimento.")
    with tab3: st.info("Em desenvolvimento.")
    with tab4: st.info("Em desenvolvimento.")
