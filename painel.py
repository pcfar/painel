import streamlit as st
import os
from github import Github
from github.GithubException import UnknownObjectException
from datetime import datetime
from PIL import Image
import io
import requests
import json
import time
import base64
import pandas as pd
import altair as alt

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="Painel T√°tico Final", page_icon="üìä", layout="wide")

# --- SISTEMA DE SENHA √öNICA ---
def check_password():
    if st.session_state.get("password_correct", False): return True
    def password_entered():
        if st.session_state.get("password") == st.secrets.get("APP_PASSWORD"):
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else: st.session_state["password_correct"] = False
    st.text_input("Password", type="password", on_change=password_entered, key="password")
    if "password_correct" in st.session_state and not st.session_state["password_correct"]:
        st.error("üòï Senha incorreta.")
    return False

# --- FUN√á√ïES DE CHAMADA √Ä IA (ESPECIALIZADAS) ---
def gerar_resposta_ia(prompt, imagens_bytes=None):
    api_key = st.secrets.get("GEMINI_API_KEY")
    if not api_key:
        st.error("Chave da API do Gemini n√£o encontrada.")
        return None
    
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={api_key}"
    headers = {'Content-Type': 'application/json'}
    
    parts = [{"text": prompt}]
    if imagens_bytes:
        for imagem_bytes in imagens_bytes:
            encoded_image = base64.b64encode(imagem_bytes).decode('utf-8')
            parts.append({"inline_data": {"mime_type": "image/jpeg", "data": encoded_image}})
            
    data = {"contents": [{"parts": parts}]}
    
    try:
        response = requests.post(url, headers=headers, data=json.dumps(data), timeout=300)
        response.raise_for_status()
        result = response.json()
        if 'candidates' in result and result['candidates']:
            return result['candidates'][0]['content']['parts'][0]['text']
    except Exception as e:
        st.error(f"Erro na chamada √† API: {e}")
    return None

# --- APLICA√á√ÉO PRINCIPAL ---
if check_password():
    st.sidebar.success("Autenticado com sucesso.")
    st.title("SISTEMA DE INTELIG√äNCIA T√ÅTICA")

    @st.cache_resource
    def get_github_connection():
        # ... (c√≥digo do GitHub sem altera√ß√µes)
        pass
    
    st.header("Central de Comando")
    tab1, tab2, tab3, tab4 = st.tabs(["Dossi√™ 1 (Liga)", "Dossi√™ 2 (Clube)", "Dossi√™ 3 (P√≥s-Jogo)", "Dossi√™ 4 (Pr√©-Jogo)"])

    # --- ABA 1: DOSSI√ä DE LIGA ---
    with tab1:
        # ... (Todo o c√≥digo da Aba 1, que j√° est√° est√°vel, permanece aqui)
        st.info("O Dossi√™ de Liga est√° funcional. Use esta aba para analisar uma liga inteira.")


    # --- ABA 2: DOSSI√ä DE CLUBE ---
    with tab2:
        st.subheader("Criar Dossi√™ 2: An√°lise Profunda de Clube")

        # --- Etapa 1: Sele√ß√£o do Alvo e Gera√ß√£o do Briefing ---
        if 'dossie_clube_final' not in st.session_state:
            with st.form("form_clube_p1"):
                st.markdown("**Etapa 1: Selecione o alvo e gere o briefing de dados para valida√ß√£o.**")
                
                # Placeholder para a lista de equipas. Idealmente, viria do Dossi√™ 1.
                # Se o dataframe do Dossi√™ 1 existir, usa-o. Sen√£o, usa uma lista padr√£o.
                if 'dominancia_df' in st.session_state and st.session_state.dominancia_df is not None:
                    lista_equipas = st.session_state.dominancia_df['Equipa'].tolist()
                else:
                    lista_equipas = ["Manchester City", "Liverpool", "Arsenal", "Chelsea", "Manchester United"]

                equipa_alvo = st.selectbox("Selecione a Equipa Alvo*", options=lista_equipas)
                
                fontes_prioritarias = st.text_area("Fontes Priorit√°rias (Opcional)", 
                                                   help="Insira URLs (uma por linha) de fontes que a IA deve priorizar na pesquisa (ex: p√°gina do plantel no Transfermarkt).")

                if st.form_submit_button("Gerar Briefing de Dados"):
                    if not equipa_alvo:
                        st.error("Por favor, selecione uma equipa.")
                    else:
                        with st.spinner(f"AGENTE DE INTELIG√äNCIA a pesquisar dados sobre o {equipa_alvo}..."):
                            prompt_briefing = f"""
**TAREFA CR√çTICA:** Aja como um pesquisador de dados desportivos. Realize uma pesquisa aprofundada na web sobre o clube '{equipa_alvo}'.

**FONTES A PRIORIZAR (se fornecidas):**
{fontes_prioritarias}

**DADOS A ENCONTRAR (OBRIGAT√ìRIO CITAR A FONTE PARA CADA DADO):**
1.  **Treinador Atual:** Nome e h√° quanto tempo est√° no cargo.
2.  **Principais Transfer√™ncias (Entradas):** Liste 2-3 refor√ßos chave para a temporada atual/pr√≥xima.
3.  **Principais Transfer√™ncias (Sa√≠das):** Liste 2-3 sa√≠das importantes.
4.  **Estat√≠sticas Chave (Temporada Anterior):** Encontre o xG (Gols Esperados) a favor e contra por jogo, e a posse de bola m√©dia.
5.  **Onze Titular Prov√°vel:** Com base nas not√≠cias mais recentes, qual a forma√ß√£o e os 11 jogadores mais prov√°veis?

**FORMATO DE SA√çDA OBRIGAT√ìRIO (BRIEFING DE VALIDA√á√ÉO):**
Use Markdown para apresentar os dados de forma clara, citando a fonte com um link para cada informa√ß√£o factual. Exemplo:
- **Treinador:** Nome do Treinador (Fonte: https://www.dafont.com/pt/)
"""
                            briefing = gerar_resposta_ia(prompt_briefing)
                            if briefing:
                                st.session_state['briefing_dados'] = briefing
                                st.session_state['equipa_alvo_selecionada'] = equipa_alvo
                                st.rerun()
                            else:
                                st.error("A pesquisa de dados falhou. A IA n√£o retornou um briefing. Tente novamente.")

        # --- Etapa 2: Valida√ß√£o e Gera√ß√£o do Dossi√™ Final ---
        if 'briefing_dados' in st.session_state and 'dossie_clube_final' not in st.session_state:
            st.markdown("---")
            st.subheader("Etapa 2: Valida√ß√£o do Briefing e Gera√ß√£o do Dossi√™ Final")
            
            st.info("Por favor, valide os dados encontrados pela IA. Se estiverem corretos, aprove para gerar o dossi√™ completo.")
            st.markdown(st.session_state['briefing_dados'])

            if st.button("Aprovar Dados e Gerar Dossi√™ Completo"):
                with st.spinner(f"AGENTE DE INTELIG√äNCIA a redigir o dossi√™ completo sobre o {st.session_state['equipa_alvo_selecionada']}..."):
                    prompt_dossie_final = f"""
**TAREFA CR√çTICA:** Aja como um Analista de Futebol de elite. Com base nos factos validados abaixo, escreva um dossi√™ profundo sobre o '{st.session_state['equipa_alvo_selecionada']}', seguindo a estrutura detalhada.

**FACTOS VALIDADOS (Use apenas esta informa√ß√£o para a base factual):**
---
{st.session_state['briefing_dados']}
---

**ESTRUTURA DO DOSSI√ä (MODELO OBRIGAT√ìRIO):**

### **DOSSI√ä ESTRAT√âGICO DE CLUBE: {st.session_state['equipa_alvo_selecionada'].upper()}**

**1. O DNA DO CLUBE (A IDENTIDADE)**
* **Fotografia do Elenco Atual:**
    * **Onze Titular Prov√°vel (Tabela):** [Crie uma tabela com a forma√ß√£o e os 11 titulares]
    * **An√°lise de Transfer√™ncias:** [Descreva o impacto dos refor√ßos e sa√≠das listados nos factos]
* **Raio-X da Temporada Anterior:**
    * **Padr√µes Estat√≠sticos:** [Analise os dados de xG e posse de bola dos factos. O que eles nos dizem sobre o estilo da equipa?]

**2. A M√ÅQUINA T√ÅTICA (COMO A EQUIPA JOGA)**
* **O Comandante e a Sua Filosofia:** [Analise o perfil do treinador listado nos factos]
* **Decodificando o Sistema:**
    * **O Jogador-Sistema:** [Com base no onze titular, identifique e analise o jogador t√°tico mais fundamental]
    * **Flexibilidade e Varia√ß√µes:** [Discuta como a equipa pode variar taticamente com base no plantel]

**3. O VEREDITO ACION√ÅVEL (O QUE OBSERVAR)**
* **S√≠ntese Anal√≠tica (O Resumo Inteligente):** [Conecte todos os pontos: como as transfer√™ncias impactam o sistema do treinador, refletido nos padr√µes estat√≠sticos]
* **Cen√°rios de Monitoramento In-Live (Os Gatilhos):** [Crie 3 cen√°rios pr√°ticos para observar durante os jogos]
"""
                    dossie_final = gerar_resposta_ia(prompt_dossie_final)
                    if dossie_final:
                        st.session_state['dossie_clube_final'] = dossie_final
                        st.rerun()
                    else:
                        st.error("A gera√ß√£o do dossi√™ final falhou. Tente novamente.")

        # --- Exibi√ß√£o do Dossi√™ de Clube Final ---
        if 'dossie_clube_final' in st.session_state:
            st.markdown("---")
            st.header(f"Dossi√™ Final: {st.session_state['equipa_alvo_selecionada']}")
            st.success("Dossi√™ de clube gerado com sucesso!")
            st.markdown(st.session_state['dossie_clube_final'])

            if st.button("Limpar e Analisar Outro Clube"):
                # Limpa apenas as chaves relacionadas ao Dossi√™ de Clube
                for key in ['briefing_dados', 'dossie_clube_final', 'equipa_alvo_selecionada']:
                    if key in st.session_state:
                        del st.session_state[key]
                st.rerun()


    with tab3: st.info("Em desenvolvimento.")
    with tab4: st.info("Em desenvolvimento.")
